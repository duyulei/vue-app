<template>
  <div id="resume-menu">
    <transition name="slide-fade">
      <div @click.self="close" @touchmove.prevent :value="value" class="bg" v-if="show">
        <div class="menu-list">
          <div @click="select(menu.div)" class="menu-item" v-for="menu in resumeMenu" v-if="menu.has">
            <div class="menu-label">
              <span>{{menu.name}}</span>
              <i class="iconfont icon-bitian" v-if="menu.must"></i>
            </div>
            <a class="btn btn-link" v-if="!menu.canNotDelete" @click="deleteModel(menu.div)">
              <i class="iconfont icon-shanchu"></i>
            </a>
          </div>
          <hr style="border-top: 1px solid #ccc;margin-left: 30px;margin-right: 30px"/>
          <div class="menu-item" v-for="menu in resumeMenu" v-if="!menu.has">
            <div class="menu-label">
              <span>{{menu.name}}</span>
              <i class="iconfont icon-bitian" v-if="menu.must"></i>
            </div>
            <a class="btn btn-link" @click="addModel(menu.div)">
              <i class="iconfont icon-tianjia" style="color: #D86471"></i>
            </a>
          </div>
        </div>
      </div>
    </transition>
  </div>
</template>

<script>
  export default {
    props: {
      value: false,
      resume: ''
    },
    data() {
      return {
        show: false,
        resumeMenu: [{
          div: 'basicInfoValue',
          name: '基本信息',
          must: true,
          has: false,
          canNotDelete: true
        }, {
          div: 'jobIntentionValue',
          name: '职位意向',
          must: true,
          has: false
        }, {
          div: 'eduBgdValue',
          name: '教育背景',
          must: true,
          has: false
        }, {
          div: 'workExpValueList',
          name: '工作经历',
          must: false,
          has: false
        }, {
          div: 'projExpValueList',
          name: '项目经验',
          must: false,
          has: false
        }, {
          div: 'skillsSpclValueList',
          name: '技能特长',
          must: false,
          has: false
        }, {
          div: 'skillsCertValueList',
          name: '证书',
          must: false,
          has: false
        }, {
          div: 'skillsTrnValueList',
          name: '培训经历',
          must: false,
          has: false
        }, {
          div: 'affixInfoValue',
          name: '附加信息',
          must: false,
          has: false
        }
        ]
      }
    },
    watch: {
      value(val) {
        console.log(val);
        this.show = val;
      },
      show(val) {
        this.$emit('input', val);
      },
      resume(val) {
        for (let i in this.resume) {
          if (this.resume.hasOwnProperty(i)) {
            for (let index = 0; index < this.resumeMenu.length; index++) {
              if (i === 'workStateValue' || i === 'skillsStateValue') {
                for (let j in this.resume[i]) {
                  if (this.resumeMenu[index].div === j && this.resume[i][j] !== null) {
                    this.resumeMenu[index].has = true;
                  }
                }
              } else if (this.resumeMenu[index].div === i && this.resume[i] !== null) {
                this.resumeMenu[index].has = true;
              }
            }
            console.log(i + this.resume[i]);
          }
        }
        console.log(this.resumeMenu)
      }
    },
    methods: {
      close: function () {
        this.show = false;
      },
      select: function (id) {
        this.$emit('select-type', '#' + id);
        this.show = false;
      },
      deleteModel: function (id) {
        console.log(id)
        switch (id) {
          case 'jobIntentionValue':
            this.$store.dispatch('deleteJobIntention').then(res => {
              console.log(res.data.data)
              if (res.data.code === '200') {
                this.removeModel(id)
              }
            })
            break
          case 'eduBgdValue':
            this.$store.dispatch('deleteEduBgd').then(res => {
              console.log(res.data.data)
              if (res.data.code === '200') {
                this.removeModel(id)
              }
            })
            break
          case 'workExpValueList':
            this.$store.dispatch('deleteWorkExp').then(res => {
              console.log(res.data.data)
              if (res.data.code === '200') {
                this.removeModel(id)
              }
            })
            break
          case 'projExpValueList':
            this.$store.dispatch('deleteProjExp').then(res => {
              console.log(res.data.data)
              if (res.data.code === '200') {
                this.removeModel(id)
              }
            })
            break
          case 'skillsSpclValueList':
            this.$store.dispatch('deleteSkillsSpcl').then(res => {
              console.log(res.data.data)
              if (res.data.code === '200') {
                this.removeModel(id)
              }
            })
            break
          case 'skillsCertValueList':
            this.$store.dispatch('deleteSkillsCert').then(res => {
              console.log(res.data.data)
              if (res.data.code === '200') {
                this.removeModel(id)
              }
            })
            break
          case 'skillsTrnValueList':
            this.$store.dispatch('deleteSkillsTrn').then(res => {
              console.log(res.data.data)
              if (res.data.code === '200') {
                this.removeModel(id)
              }
            })
            break
          case 'affixInfoValue':
            this.$store.dispatch('deleteAffixInfo').then(res => {
              console.log(res.data.data)
              if (res.data.code === '200') {
                this.removeModel(id)
              }
            })
            break
        }
      },
      addModel: function (id) {
        console.log(id)
        switch (id) {
          case 'jobIntentionValue':
            this.$router.push({path: '/edit/job'})
            break
          case 'eduBgdValue':
            this.$router.push({path: '/add/edu'})
            break
          case 'workExpValueList':
            this.$router.push({path: '/edit/career'})
            break
          case 'projExpValueList':
            this.$router.push({path: '/edit/project'})
            break
          case 'skillsSpclValueList':
            this.$router.push({path: '/edit/skill'})
            break
          case 'skillsCertValueList':
            this.$router.push({path: '/edit/certificate'})
            break
          case 'skillsTrnValueList':
            this.$router.push({path: '/edit/train'})
            break
          case 'affixInfoValue':
            this.$emit('affix-click');
            break
        }
      },
      removeModel: function (id) {
        for (let i = 0; i < this.resumeMenu.length; i++) {
          if (id === this.resumeMenu[i].div) {
            this.resumeMenu[i].has = false
            break
          }
        }
      }
    },
    mounted() {
      if (this.value) {
        this.show = true;
      }
    }
  }
</script>
<style scoped>
  .bg {
    position: fixed;
    left: 0;
    top: 45px;
    width: 100%;
    height: 100%;
    z-index: 10;
  }

  .menu-list {
    position: absolute;
    right: 0;
    width: 50%;
    height: 100%;
    background-color: rgba(255, 255, 255, 0.9);
    border-left: 1px solid #D86471 !important;
    padding-top: 20px;
    overflow: auto;
  }

  .menu-item {
    display: -webkit-flex;
    display: flex;
    -webkit-align-items: center;
    align-items: center;
    -webkit-justify-content: space-between;
    justify-content: space-between;
    height: 45px;
  }

  .menu-item > .menu-label {
    margin-left: 20px;
    display: -webkit-flex;
    display: flex;
    -webkit-align-items: center;
    align-items: center;
  }

  .menu-item > .menu-label > i {
    font-size: 20px;
    color: #D86471;
  }

  .menu-item > .menu-label > span {
    font-size: 16px;
  }

  .menu-item > .btn {
    margin-right: 20px;
    color: #444444;
  }

  .menu-item > .btn > i {
    font-size: 25px;
  }

  .slide-fade-enter-active {
    transition: all .3s ease;
  }

  .slide-fade-leave-active {
    transition: all .3s ease;
  }

  .slide-fade-enter, .slide-fade-leave-to
    /* .slide-fade-leave-active for below version 2.1.8 */
  {
    transform: translateX(100%);
  }

</style>
